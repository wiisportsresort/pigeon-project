import './Card.css';
/* src/components/Card.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_slot
} from "../../web_modules/svelte/internal.js";

import { createEventDispatcher } from "../../web_modules/svelte.js";
const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});
const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});

// (68:2) {#if image}
function create_if_block(ctx) {
	let div1;
	let div0;
	let img;
	let img_src_value;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			img = element("img");
			if (img.src !== (img_src_value = /*image*/ ctx[0].src)) attr(img, "src", img_src_value);
			attr(img, "alt", "profile");
			attr(img, "class", "svelte-17irufa");
			attr(div0, "class", "image");
			toggle_class(div0, "interactive", /*interactive*/ ctx[1]);
			attr(div1, "class", "image-col svelte-17irufa");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, img);

			if (!mounted) {
				dispose = listen(div0, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*image*/ 1 && img.src !== (img_src_value = /*image*/ ctx[0].src)) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*interactive*/ 2) {
				toggle_class(div0, "interactive", /*interactive*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let t0;
	let div2;
	let div0;
	let t1;
	let div1;
	let t2;
	let current;
	let mounted;
	let dispose;
	let if_block = /*image*/ ctx[0] && create_if_block(ctx);
	const header_slot_template = /*#slots*/ ctx[4].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[3], get_header_slot_context);
	const content_slot_template = /*#slots*/ ctx[4].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[3], get_content_slot_context);
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			div3 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div2 = element("div");
			div0 = element("div");
			if (header_slot) header_slot.c();
			t1 = space();
			div1 = element("div");
			if (content_slot) content_slot.c();
			t2 = space();
			if (default_slot) default_slot.c();
			attr(div0, "class", "header svelte-17irufa");
			toggle_class(div0, "interactive", /*interactive*/ ctx[1]);
			attr(div1, "class", "content svelte-17irufa");
			toggle_class(div1, "interactive", /*interactive*/ ctx[1]);
			attr(div2, "class", "body svelte-17irufa");
			attr(div3, "class", "card svelte-17irufa");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			if (if_block) if_block.m(div3, null);
			append(div3, t0);
			append(div3, div2);
			append(div2, div0);

			if (header_slot) {
				header_slot.m(div0, null);
			}

			append(div2, t1);
			append(div2, div1);

			if (content_slot) {
				content_slot.m(div1, null);
			}

			append(div2, t2);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*click_handler_1*/ ctx[6]),
					listen(div1, "click", /*click_handler_2*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*image*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div3, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (header_slot) {
				if (header_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_header_slot_changes, get_header_slot_context);
				}
			}

			if (dirty & /*interactive*/ 2) {
				toggle_class(div0, "interactive", /*interactive*/ ctx[1]);
			}

			if (content_slot) {
				if (content_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_content_slot_changes, get_content_slot_context);
				}
			}

			if (dirty & /*interactive*/ 2) {
				toggle_class(div1, "interactive", /*interactive*/ ctx[1]);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			transition_in(content_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			transition_out(content_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block) if_block.d();
			if (header_slot) header_slot.d(detaching);
			if (content_slot) content_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	
	let { image = undefined } = $$props;
	let { interactive = false } = $$props;
	const dispatch = createEventDispatcher();
	const click_handler = e => dispatch("image-click", e);
	const click_handler_1 = e => dispatch("header-click", e);
	const click_handler_2 = e => dispatch("content-click", e);

	$$self.$$set = $$props => {
		if ("image" in $$props) $$invalidate(0, image = $$props.image);
		if ("interactive" in $$props) $$invalidate(1, interactive = $$props.interactive);
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	return [
		image,
		interactive,
		dispatch,
		$$scope,
		slots,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class Card extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { image: 0, interactive: 1 });
	}
}

export default Card;
//# sourceMappingURL=Card.js.map
